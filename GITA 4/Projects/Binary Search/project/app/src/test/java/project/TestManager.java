/*
 * This source file was generated by the Gradle 'init' task
 */
package project;

import org.junit.jupiter.api.Test;

import project.DataManager.IteratedValue;
import project.util.Utility;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;

import javax.xml.crypto.Data;

import org.junit.jupiter.api.DisplayName;

class TestManager {

    // @Test
    // @DisplayName("Debug")
    // public void debug(){
    //     assertEquals(1, 1);
    // }

    //Checks if the amount of iterations is equal to the index at which is it was found (since its ordered i + 1)
    @Test
    @DisplayName("Check Linear Iterations")
    public void compareLinearIteration(){
        int size = 5000;

        int[] data = new int[size];
        
        for(int i = 0; i < size; i++){
            data[i] = i + 1;
        }

        int low = 1;
        int high = 5000;
        int random = (int)Utility.random(low, high);

        IteratedValue<Integer> resultLinear = DataManager.findNumberLinear(data, new IteratedValue<Integer>(random), 0);

        int indexLinear = resultLinear.value;

        int iterationsLinear = resultLinear.iterations;

        assertEquals(indexLinear + 1, iterationsLinear);
    }

    //checks if both search methods have the same behavior through an array with defined values
    @Test
    @DisplayName("Check Equals Sytstematically Generated Array")
    public void checkEqualsSystematic(){
        int size = 5000;
        int low = 1;
        int high = 5000;

        int[] unsorted = new int[size];

        for(int i = 0; i < size; i++){
            unsorted[i] = i + 1;
        }

        int[] sorted = unsorted.clone();
        Arrays.sort(sorted);

        int iterations = 5000;

        for(int i = 0; i < iterations; i++){
            int random = (int)Utility.random(low, high);

            IteratedValue<Integer> resultLinear = DataManager.findNumberLinear(unsorted, new IteratedValue<Integer>(random), 0);
            IteratedValue<Integer> resultBinary = DataManager.findNumberBinary(sorted, new IteratedValue<Integer>(random), 0, sorted.length - 1);
            
            int indexLinear = resultLinear.value;
            int indexBinary = resultBinary.value;

            int valueLinear = unsorted[indexLinear];
            int valueBinary = sorted[indexBinary];

            //fail since it should ALWAYS find the target
            if(indexLinear == -1 || indexBinary == -1)
                fail("Could Not find!");

            boolean valuesEqual = valueLinear == random && valueBinary == random;

            assertTrue(valuesEqual);
        }
    }

    //checks if both search methods have the same behavior through an array with randomyl defined values
    @Test 
    @DisplayName("Check Equals Randomly Generated Array")
    public void checkEqualsRandom() {
        int size = 5000;
        int low = 1;
        int high = 5000;

        int[] unsorted = new int[size];

        for(int i = 0; i < size; i++){
            unsorted[i] = (int)Utility.random(low, high);
        }

        int[] sorted = unsorted.clone();
        Arrays.sort(sorted);

        int iterations = 5000;

        for(int i = 0; i < iterations; i++){

            int random = (int)Utility.random(low, high);

            IteratedValue<Integer> resultLinear = DataManager.findNumberLinear(unsorted, new IteratedValue<Integer>(random), 0);
            IteratedValue<Integer> resultBinary = DataManager.findNumberBinary(sorted, new IteratedValue<Integer>(random), 0, sorted.length - 1);
            
            int indexLinear = resultLinear.value;
            int indexBinary = resultBinary.value;

            if(indexLinear == -1 && indexBinary == -1)
                continue;

            int valueLinear = unsorted[indexLinear];
            int valueBinary = sorted[indexBinary];

            boolean valuesEqual = valueLinear == random && valueBinary == random;

            assertTrue(valuesEqual);
        }
    }
}
