/*
 * This source file was generated by the Gradle 'init' task
 */
package project;

import org.junit.jupiter.api.Test;

import project.DataManager.IteratedValue;
import project.util.Utility;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;

class TestManager {

    // @Test
    // @DisplayName("Debug")
    // public void debug(){
    //     assertEquals(1, 1);
    // }

    @Test
    @DisplayName("Check Linear Iterations")
    public void compareLinearIteration(){
        int max = 5000;

        int[] data = new int[max];

        for(int i = 0; i < max; i++){
            data[i] = i + 1;
        }

        DataManager dataManager = new DataManager(data);

        int random = (int)Utility.random(1, max);

        IteratedValue<Integer> resultLinear = dataManager.findNumberLinear(data, new IteratedValue<Integer>(random), 0);

        int indexLinear = resultLinear.value;

        int iterationsLinear = resultLinear.iterations;

        assertEquals(indexLinear + 1, iterationsLinear);
    }

    @Test
    @DisplayName("Iteration Test")
    public void testIterationCalculator(){
        int max = 5000;

        int[] data = new int[max];

        for(int i = 0; i < max; i++){
            data[i] = i + 1;
        }

        DataManager dataManager = new DataManager(data);

        int random = (int)Utility.random(1, max);

        IteratedValue<Integer> resultLinear = dataManager.findNumberLinear(data, new IteratedValue<Integer>(random), 0);
        IteratedValue<Integer> resultBinary = dataManager.findNumberBinary(data, new IteratedValue<Integer>(random), 0, data.length - 1);
        
        int indexLinear = resultLinear.value;
        int indexBinary = resultBinary.value;

        int valueLinear = dataManager.getData()[indexLinear];
        int valueBinary = dataManager.getData()[indexBinary];

        boolean indexEquals = indexLinear == indexBinary;
        boolean valuesEqual = valueLinear == random && valueBinary == random;

        assertTrue(indexEquals);
        assertTrue(valuesEqual);
    }

    @Test
    @DisplayName("Systematic Array")
    public void systematicCompare(){
        int max = 5000;

        int[] data = new int[max];

        for(int i = 0; i < max; i++){
            data[i] = i + 1;
        }

        DataManager dataManager = new DataManager(data);

        int iterations = 5000;

        for(int i = 0; i < iterations; i++){

            int random = (int)Utility.random(1, max);

            int indexLinear = dataManager.findNumberBinary(data, new IteratedValue<Integer>(random), 0, data.length - 1).value;
            int indexBinary = dataManager.findNumberLinear(data, new IteratedValue<Integer>(random), 0).value;

            if(indexLinear == -1 || indexBinary == -1)
                continue;

            int valueLinear = dataManager.getData()[indexLinear];
            int valueBinary = dataManager.getData()[indexBinary];

            boolean indexEquals = indexLinear == indexBinary;
            boolean valuesEqual = valueLinear == random && valueBinary == random;

            if(!indexEquals)
                fail("Indexes NOT EQUAL");
            
            if(!valuesEqual)
                fail("Values NOT EQUAL");
            
        }
    }

    @Test 
    @DisplayName("Random Array")
    public void randomizedCompare() {
        int max = 5000;

        int[] data = new int[max];

        for(int i = 0; i < max; i++){
            data[i] = (int)Utility.random(1, max);
        }

        DataManager dataManager = new DataManager(data);

        int iterations = 5000;

        for(int i = 0; i < iterations; i++){

            int random = (int)Utility.random(1, max);

            int indexLinear = dataManager.findNumberBinary(data, new IteratedValue<Integer>(random), 0, data.length - 1).value;
            int indexBinary = dataManager.findNumberLinear(data, new IteratedValue<Integer>(random), 0).value;

            if(indexLinear == -1 && indexBinary == -1)
                continue;
                
            int valueLinear = dataManager.getData()[indexLinear];
            int valueBinary = dataManager.getData()[indexBinary];

            boolean valuesEqual = valueLinear == random && valueBinary == random;

            assertTrue(valuesEqual);
        }
    }
}
